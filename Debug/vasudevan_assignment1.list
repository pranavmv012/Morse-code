
vasudevan_assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d8c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001f18  08001f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f6c  08001f6c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001f6c  08001f6c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f6c  08001f6c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f6c  08001f6c  00011f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08001f94  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08001f94  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005287  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001010  00000000  00000000  000252d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000578  00000000  00000000  000262e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e0  00000000  00000000  00026860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e33b  00000000  00000000  00026d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004cdd  00000000  00000000  0004507b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b6c1d  00000000  00000000  00049d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100975  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013f0  00000000  00000000  001009f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000020 	.word	0x20000020
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001f00 	.word	0x08001f00

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000024 	.word	0x20000024
 80001c8:	08001f00 	.word	0x08001f00

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fd1f 	bl	8000c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f80c 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f850 	bl	800027c <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  nameExtract("pranav","vasudevan");//The function call to extract initials from first name and last name.
 80001dc:	4902      	ldr	r1, [pc, #8]	; (80001e8 <main+0x1c>)
 80001de:	4803      	ldr	r0, [pc, #12]	; (80001ec <main+0x20>)
 80001e0:	f000 f87c 	bl	80002dc <nameExtract>
 80001e4:	e7fa      	b.n	80001dc <main+0x10>
 80001e6:	bf00      	nop
 80001e8:	08001f18 	.word	0x08001f18
 80001ec:	08001f24 	.word	0x08001f24

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b096      	sub	sp, #88	; 0x58
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0314 	add.w	r3, r7, #20
 80001fa:	2244      	movs	r2, #68	; 0x44
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fe76 	bl	8001ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	463b      	mov	r3, r7
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000212:	2310      	movs	r3, #16
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800021e:	2360      	movs	r3, #96	; 0x60
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	4618      	mov	r0, r3
 800022c:	f001 f850 	bl	80012d0 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000236:	f000 fc33 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	463b      	mov	r3, r7
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fc5c 	bl	8001b10 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800025e:	f000 fc1f 	bl	8000aa0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000262:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000266:	f000 ffdd 	bl	8001224 <HAL_PWREx_ControlVoltageScaling>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000270:	f000 fc16 	bl	8000aa0 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3758      	adds	r7, #88	; 0x58
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_GPIO_Init+0x58>)
 8000292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000294:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <MX_GPIO_Init+0x58>)
 8000296:	f043 0302 	orr.w	r3, r3, #2
 800029a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <MX_GPIO_Init+0x58>)
 800029e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a0:	f003 0302 	and.w	r3, r3, #2
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2130      	movs	r1, #48	; 0x30
 80002ac:	480a      	ldr	r0, [pc, #40]	; (80002d8 <MX_GPIO_Init+0x5c>)
 80002ae:	f000 ff93 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80002b2:	2330      	movs	r3, #48	; 0x30
 80002b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	4804      	ldr	r0, [pc, #16]	; (80002d8 <MX_GPIO_Init+0x5c>)
 80002c8:	f000 fe1c 	bl	8000f04 <HAL_GPIO_Init>

}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000
 80002d8:	48000400 	.word	0x48000400

080002dc <nameExtract>:
 *               doesn't return any values
 * PARAMETERS   :char fName : first name
 *               char lName : last name
 */
char nameExtract(char fName[50], char lName[50])
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
	char firstInitial = fName[0];//extracting the initial of first name
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	73fb      	strb	r3, [r7, #15]
	char lastInitial = lName[0];//extracting the initial of last name
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	73bb      	strb	r3, [r7, #14]
	fgenerateMorse(firstInitial);//function call to generate morse code for first initial
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f883 	bl	8000400 <fgenerateMorse>
	HAL_Delay(lettSpace);//delay between initials
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <nameExtract+0x44>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fcf8 	bl	8000cf4 <HAL_Delay>
	lgenerateMorse(lastInitial);//function call to generate morse code for last initial
 8000304:	7bbb      	ldrb	r3, [r7, #14]
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fa22 	bl	8000750 <lgenerateMorse>
	HAL_Delay(iniSpace);//delay between Consecutive initials
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <nameExtract+0x48>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fcef 	bl	8000cf4 <HAL_Delay>

}
 8000316:	bf00      	nop
 8000318:	4618      	mov	r0, r3
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	2000000c 	.word	0x2000000c
 8000324:	20000010 	.word	0x20000010

08000328 <fdotCode>:
/*FUNCTION      : fdotCode
 * DESCRIPTION  :function to generate a dot in the Morse code for first initial with no
 *               parameters and function doesn't return any values
 */
void fdotCode()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2110      	movs	r1, #16
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <fdotCode+0x1c>)
 8000332:	f000 ff51 	bl	80011d8 <HAL_GPIO_WritePin>
	HAL_Delay(dotTime);
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <fdotCode+0x20>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fcda 	bl	8000cf4 <HAL_Delay>
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	48000400 	.word	0x48000400
 8000348:	20000000 	.word	0x20000000

0800034c <fdashCode>:
/*FUNCTION      : fdashCode
 * DESCRIPTION  :function to generate a dash in the Morse code for first initial with no
 *               parameters and function doesn't return any values
 */
void fdashCode()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2110      	movs	r1, #16
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <fdashCode+0x1c>)
 8000356:	f000 ff3f 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_Delay(dashTime);
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <fdashCode+0x20>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fcc8 	bl	8000cf4 <HAL_Delay>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	48000400 	.word	0x48000400
 800036c:	20000004 	.word	0x20000004

08000370 <fspaceCode>:
/*FUNCTION      : fspaceCode
 * DESCRIPTION  :function to generate the gap between dot and dash for first initial with no
 *               parameters and function doesn't return any values
 */
void fspaceCode()
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2110      	movs	r1, #16
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <fspaceCode+0x1c>)
 800037a:	f000 ff2d 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_Delay(partSpace);
 800037e:	4b04      	ldr	r3, [pc, #16]	; (8000390 <fspaceCode+0x20>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fcb6 	bl	8000cf4 <HAL_Delay>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	48000400 	.word	0x48000400
 8000390:	20000008 	.word	0x20000008

08000394 <ldotCode>:
/*FUNCTION      : ldotCode
 * DESCRIPTION  :function to generate a dot in the Morse code for last initial with no
 *               parameters and function doesn't return any values
 */
void ldotCode()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000398:	2201      	movs	r2, #1
 800039a:	2120      	movs	r1, #32
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <ldotCode+0x1c>)
 800039e:	f000 ff1b 	bl	80011d8 <HAL_GPIO_WritePin>
	HAL_Delay(dotTime);
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <ldotCode+0x20>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fca4 	bl	8000cf4 <HAL_Delay>
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	48000400 	.word	0x48000400
 80003b4:	20000000 	.word	0x20000000

080003b8 <ldashCode>:
/*FUNCTION      : ldashCode
 * DESCRIPTION  :function to generate a dash in the Morse code for last initial with no
 *               parameters and function doesn't return any values
 */
void ldashCode()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2120      	movs	r1, #32
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <ldashCode+0x1c>)
 80003c2:	f000 ff09 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_Delay(dashTime);
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <ldashCode+0x20>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fc92 	bl	8000cf4 <HAL_Delay>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	48000400 	.word	0x48000400
 80003d8:	20000004 	.word	0x20000004

080003dc <lspaceCode>:
/*FUNCTION      : lspaceCode
 * DESCRIPTION  :function to generate the gap between dot and dash for last initial with no
 *               parameters and function doesn't return any values
 */
void lspaceCode()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <lspaceCode+0x1c>)
 80003e6:	f000 fef7 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_Delay(partSpace);
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <lspaceCode+0x20>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fc80 	bl	8000cf4 <HAL_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	48000400 	.word	0x48000400
 80003fc:	20000008 	.word	0x20000008

08000400 <fgenerateMorse>:
 * DESCRIPTION  :function to generate Morse code for the first name initial
 *               doesn't return any values
 * PARAMETERS   : fInitial : the first name initial
 */
void fgenerateMorse(char fInitial)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
switch (fInitial)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	3b61      	subs	r3, #97	; 0x61
 800040e:	2b19      	cmp	r3, #25
 8000410:	f200 819a 	bhi.w	8000748 <fgenerateMorse+0x348>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <fgenerateMorse+0x1c>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	08000485 	.word	0x08000485
 8000420:	08000497 	.word	0x08000497
 8000424:	080004b9 	.word	0x080004b9
 8000428:	080004db 	.word	0x080004db
 800042c:	080004f5 	.word	0x080004f5
 8000430:	080004ff 	.word	0x080004ff
 8000434:	08000521 	.word	0x08000521
 8000438:	0800053b 	.word	0x0800053b
 800043c:	0800055d 	.word	0x0800055d
 8000440:	0800056f 	.word	0x0800056f
 8000444:	08000591 	.word	0x08000591
 8000448:	080005ab 	.word	0x080005ab
 800044c:	080005cd 	.word	0x080005cd
 8000450:	080005df 	.word	0x080005df
 8000454:	080005f1 	.word	0x080005f1
 8000458:	0800060b 	.word	0x0800060b
 800045c:	0800062d 	.word	0x0800062d
 8000460:	0800064f 	.word	0x0800064f
 8000464:	08000669 	.word	0x08000669
 8000468:	08000683 	.word	0x08000683
 800046c:	0800068d 	.word	0x0800068d
 8000470:	080006a7 	.word	0x080006a7
 8000474:	080006c9 	.word	0x080006c9
 8000478:	080006e3 	.word	0x080006e3
 800047c:	08000705 	.word	0x08000705
 8000480:	08000727 	.word	0x08000727
{
         case 'a':
             fdotCode();
 8000484:	f7ff ff50 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 8000488:	f7ff ff72 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 800048c:	f7ff ff5e 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000490:	f7ff ff6e 	bl	8000370 <fspaceCode>
	  		 break;
 8000494:	e158      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'b':
	  		 fdashCode();
 8000496:	f7ff ff59 	bl	800034c <fdashCode>
	         fspaceCode();
 800049a:	f7ff ff69 	bl	8000370 <fspaceCode>
	         fdotCode();
 800049e:	f7ff ff43 	bl	8000328 <fdotCode>
	         fspaceCode();
 80004a2:	f7ff ff65 	bl	8000370 <fspaceCode>
	         fdotCode();
 80004a6:	f7ff ff3f 	bl	8000328 <fdotCode>
             fspaceCode();
 80004aa:	f7ff ff61 	bl	8000370 <fspaceCode>
             fdotCode();
 80004ae:	f7ff ff3b 	bl	8000328 <fdotCode>
             fspaceCode();
 80004b2:	f7ff ff5d 	bl	8000370 <fspaceCode>
            break;
 80004b6:	e147      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'c':
	  		 fdashCode();
 80004b8:	f7ff ff48 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80004bc:	f7ff ff58 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 80004c0:	f7ff ff32 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 80004c4:	f7ff ff54 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80004c8:	f7ff ff40 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80004cc:	f7ff ff50 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 80004d0:	f7ff ff2a 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 80004d4:	f7ff ff4c 	bl	8000370 <fspaceCode>
	  		 break;
 80004d8:	e136      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'd':
	  		 fdashCode();
 80004da:	f7ff ff37 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80004de:	f7ff ff47 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 80004e2:	f7ff ff21 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 80004e6:	f7ff ff43 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 80004ea:	f7ff ff1d 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 80004ee:	f7ff ff3f 	bl	8000370 <fspaceCode>
	  		 break;
 80004f2:	e129      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'e':
	  		 fdotCode();
 80004f4:	f7ff ff18 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 80004f8:	f7ff ff3a 	bl	8000370 <fspaceCode>
	  		 break;
 80004fc:	e124      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'f':
	  		 fdotCode();
 80004fe:	f7ff ff13 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 8000502:	f7ff ff35 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 8000506:	f7ff ff0f 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 800050a:	f7ff ff31 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 800050e:	f7ff ff1d 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000512:	f7ff ff2d 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 8000516:	f7ff ff07 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 800051a:	f7ff ff29 	bl	8000370 <fspaceCode>
	  		 break;
 800051e:	e113      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'g':
	  		 fdashCode();
 8000520:	f7ff ff14 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000524:	f7ff ff24 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000528:	f7ff ff10 	bl	800034c <fdashCode>
	  		 fspaceCode();
 800052c:	f7ff ff20 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 8000530:	f7ff fefa 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 8000534:	f7ff ff1c 	bl	8000370 <fspaceCode>
	  		 break;
 8000538:	e106      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'h':
	  		 fdotCode();
 800053a:	f7ff fef5 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 800053e:	f7ff ff17 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 8000542:	f7ff fef1 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 8000546:	f7ff ff13 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 800054a:	f7ff feed 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 800054e:	f7ff ff0f 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 8000552:	f7ff fee9 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 8000556:	f7ff ff0b 	bl	8000370 <fspaceCode>
	  		 break;
 800055a:	e0f5      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'i':
	  		 fdotCode();
 800055c:	f7ff fee4 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 8000560:	f7ff ff06 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 8000564:	f7ff fee0 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 8000568:	f7ff ff02 	bl	8000370 <fspaceCode>
	  		 break;
 800056c:	e0ec      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'j':
	  		 fdotCode();
 800056e:	f7ff fedb 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 8000572:	f7ff fefd 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000576:	f7ff fee9 	bl	800034c <fdashCode>
	  		 fspaceCode();
 800057a:	f7ff fef9 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 800057e:	f7ff fee5 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000582:	f7ff fef5 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000586:	f7ff fee1 	bl	800034c <fdashCode>
	  		 fspaceCode();
 800058a:	f7ff fef1 	bl	8000370 <fspaceCode>
	  		 break;
 800058e:	e0db      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'k':
	  		 fdashCode();
 8000590:	f7ff fedc 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000594:	f7ff feec 	bl	8000370 <fspaceCode>
	  		 fdotCode();
 8000598:	f7ff fec6 	bl	8000328 <fdotCode>
	  		 fspaceCode();
 800059c:	f7ff fee8 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80005a0:	f7ff fed4 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80005a4:	f7ff fee4 	bl	8000370 <fspaceCode>
	  		 break;
 80005a8:	e0ce      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'l':
	  	     fdotCode();
 80005aa:	f7ff febd 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80005ae:	f7ff fedf 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80005b2:	f7ff fecb 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80005b6:	f7ff fedb 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 80005ba:	f7ff feb5 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80005be:	f7ff fed7 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 80005c2:	f7ff feb1 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80005c6:	f7ff fed3 	bl	8000370 <fspaceCode>
	  	     break;
 80005ca:	e0bd      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'm':
	  		 fdashCode();
 80005cc:	f7ff febe 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80005d0:	f7ff fece 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80005d4:	f7ff feba 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80005d8:	f7ff feca 	bl	8000370 <fspaceCode>
	  		 break;
 80005dc:	e0b4      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'n':
	  		 fdashCode();
 80005de:	f7ff feb5 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80005e2:	f7ff fec5 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 80005e6:	f7ff fe9f 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80005ea:	f7ff fec1 	bl	8000370 <fspaceCode>
	  	     break;
 80005ee:	e0ab      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'o':
	  		 fdashCode();
 80005f0:	f7ff feac 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80005f4:	f7ff febc 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80005f8:	f7ff fea8 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80005fc:	f7ff feb8 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000600:	f7ff fea4 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000604:	f7ff feb4 	bl	8000370 <fspaceCode>
	  		 break;
 8000608:	e09e      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'p':
	  	     fdotCode();
 800060a:	f7ff fe8d 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 800060e:	f7ff feaf 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000612:	f7ff fe9b 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000616:	f7ff feab 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 800061a:	f7ff fe97 	bl	800034c <fdashCode>
	  		 fspaceCode();
 800061e:	f7ff fea7 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 8000622:	f7ff fe81 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000626:	f7ff fea3 	bl	8000370 <fspaceCode>
	  	     break;
 800062a:	e08d      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'q':
	  		 fdashCode();
 800062c:	f7ff fe8e 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000630:	f7ff fe9e 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000634:	f7ff fe8a 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000638:	f7ff fe9a 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 800063c:	f7ff fe74 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000640:	f7ff fe96 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000644:	f7ff fe82 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000648:	f7ff fe92 	bl	8000370 <fspaceCode>
	  		 break;
 800064c:	e07c      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'r':
	  	     fdotCode();
 800064e:	f7ff fe6b 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000652:	f7ff fe8d 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000656:	f7ff fe79 	bl	800034c <fdashCode>
	  		 fspaceCode();
 800065a:	f7ff fe89 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 800065e:	f7ff fe63 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000662:	f7ff fe85 	bl	8000370 <fspaceCode>
	  		 break;
 8000666:	e06f      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 's':
	  	     fdotCode();
 8000668:	f7ff fe5e 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 800066c:	f7ff fe80 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 8000670:	f7ff fe5a 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000674:	f7ff fe7c 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 8000678:	f7ff fe56 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 800067c:	f7ff fe78 	bl	8000370 <fspaceCode>
	  	     break;
 8000680:	e062      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 't':
	  		 fdashCode();
 8000682:	f7ff fe63 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000686:	f7ff fe73 	bl	8000370 <fspaceCode>
	  		 break;
 800068a:	e05d      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'u':
	  	     fdotCode();
 800068c:	f7ff fe4c 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000690:	f7ff fe6e 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 8000694:	f7ff fe48 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000698:	f7ff fe6a 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 800069c:	f7ff fe56 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80006a0:	f7ff fe66 	bl	8000370 <fspaceCode>
	  		 break;
 80006a4:	e050      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'v':
	  	     fdotCode();
 80006a6:	f7ff fe3f 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80006aa:	f7ff fe61 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 80006ae:	f7ff fe3b 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80006b2:	f7ff fe5d 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 80006b6:	f7ff fe37 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80006ba:	f7ff fe59 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80006be:	f7ff fe45 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80006c2:	f7ff fe55 	bl	8000370 <fspaceCode>
	  		 break;
 80006c6:	e03f      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'w':
	  	     fdotCode();
 80006c8:	f7ff fe2e 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80006cc:	f7ff fe50 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80006d0:	f7ff fe3c 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80006d4:	f7ff fe4c 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80006d8:	f7ff fe38 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80006dc:	f7ff fe48 	bl	8000370 <fspaceCode>
	  		 break;
 80006e0:	e032      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'x':
	  		 fdashCode();
 80006e2:	f7ff fe33 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80006e6:	f7ff fe43 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 80006ea:	f7ff fe1d 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80006ee:	f7ff fe3f 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 80006f2:	f7ff fe19 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 80006f6:	f7ff fe3b 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 80006fa:	f7ff fe27 	bl	800034c <fdashCode>
	  		 fspaceCode();
 80006fe:	f7ff fe37 	bl	8000370 <fspaceCode>
	  		 break;
 8000702:	e021      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'y':
	  		 fdashCode();
 8000704:	f7ff fe22 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000708:	f7ff fe32 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 800070c:	f7ff fe0c 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000710:	f7ff fe2e 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 8000714:	f7ff fe1a 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000718:	f7ff fe2a 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 800071c:	f7ff fe16 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000720:	f7ff fe26 	bl	8000370 <fspaceCode>
	  		 break;
 8000724:	e010      	b.n	8000748 <fgenerateMorse+0x348>
	  	 case 'z':
	  		 fdashCode();
 8000726:	f7ff fe11 	bl	800034c <fdashCode>
	  		 fspaceCode();
 800072a:	f7ff fe21 	bl	8000370 <fspaceCode>
	  		 fdashCode();
 800072e:	f7ff fe0d 	bl	800034c <fdashCode>
	  		 fspaceCode();
 8000732:	f7ff fe1d 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 8000736:	f7ff fdf7 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 800073a:	f7ff fe19 	bl	8000370 <fspaceCode>
	  	     fdotCode();
 800073e:	f7ff fdf3 	bl	8000328 <fdotCode>
	  	     fspaceCode();
 8000742:	f7ff fe15 	bl	8000370 <fspaceCode>
	  	     break;
 8000746:	bf00      	nop
	  	}
	  }
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <lgenerateMorse>:
 * DESCRIPTION  :function to generate Morse code for the last name initial
 *               doesn't return any values
 * PARAMETERS   :lInitial: the last name initial
 */
void lgenerateMorse(char lInitial)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  switch (lInitial)
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	3b61      	subs	r3, #97	; 0x61
 800075e:	2b19      	cmp	r3, #25
 8000760:	f200 819a 	bhi.w	8000a98 <lgenerateMorse+0x348>
 8000764:	a201      	add	r2, pc, #4	; (adr r2, 800076c <lgenerateMorse+0x1c>)
 8000766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076a:	bf00      	nop
 800076c:	080007d5 	.word	0x080007d5
 8000770:	080007e7 	.word	0x080007e7
 8000774:	08000809 	.word	0x08000809
 8000778:	0800082b 	.word	0x0800082b
 800077c:	08000845 	.word	0x08000845
 8000780:	0800084f 	.word	0x0800084f
 8000784:	08000871 	.word	0x08000871
 8000788:	0800088b 	.word	0x0800088b
 800078c:	080008ad 	.word	0x080008ad
 8000790:	080008bf 	.word	0x080008bf
 8000794:	080008e1 	.word	0x080008e1
 8000798:	080008fb 	.word	0x080008fb
 800079c:	0800091d 	.word	0x0800091d
 80007a0:	0800092f 	.word	0x0800092f
 80007a4:	08000941 	.word	0x08000941
 80007a8:	0800095b 	.word	0x0800095b
 80007ac:	0800097d 	.word	0x0800097d
 80007b0:	0800099f 	.word	0x0800099f
 80007b4:	080009b9 	.word	0x080009b9
 80007b8:	080009d3 	.word	0x080009d3
 80007bc:	080009dd 	.word	0x080009dd
 80007c0:	080009f7 	.word	0x080009f7
 80007c4:	08000a19 	.word	0x08000a19
 80007c8:	08000a33 	.word	0x08000a33
 80007cc:	08000a55 	.word	0x08000a55
 80007d0:	08000a77 	.word	0x08000a77
  {
	  	 case 'a':
	  		 ldotCode();
 80007d4:	f7ff fdde 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 80007d8:	f7ff fe00 	bl	80003dc <lspaceCode>
	  	 	 ldashCode();
 80007dc:	f7ff fdec 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80007e0:	f7ff fdfc 	bl	80003dc <lspaceCode>
	  		 break;
 80007e4:	e158      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'b':
	  		 ldashCode();
 80007e6:	f7ff fde7 	bl	80003b8 <ldashCode>
	           lspaceCode();
 80007ea:	f7ff fdf7 	bl	80003dc <lspaceCode>
	           ldotCode();
 80007ee:	f7ff fdd1 	bl	8000394 <ldotCode>
	           lspaceCode();
 80007f2:	f7ff fdf3 	bl	80003dc <lspaceCode>
	           ldotCode();
 80007f6:	f7ff fdcd 	bl	8000394 <ldotCode>
	           lspaceCode();
 80007fa:	f7ff fdef 	bl	80003dc <lspaceCode>
	           ldotCode();
 80007fe:	f7ff fdc9 	bl	8000394 <ldotCode>
	           lspaceCode();
 8000802:	f7ff fdeb 	bl	80003dc <lspaceCode>
	           break;
 8000806:	e147      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'c':
	  		 ldashCode();
 8000808:	f7ff fdd6 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 800080c:	f7ff fde6 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 8000810:	f7ff fdc0 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 8000814:	f7ff fde2 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000818:	f7ff fdce 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 800081c:	f7ff fdde 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 8000820:	f7ff fdb8 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 8000824:	f7ff fdda 	bl	80003dc <lspaceCode>
	  		 break;
 8000828:	e136      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'd':
	  		 ldashCode();
 800082a:	f7ff fdc5 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 800082e:	f7ff fdd5 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 8000832:	f7ff fdaf 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 8000836:	f7ff fdd1 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 800083a:	f7ff fdab 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 800083e:	f7ff fdcd 	bl	80003dc <lspaceCode>
	  		 break;
 8000842:	e129      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'e':
	  		 ldotCode();
 8000844:	f7ff fda6 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 8000848:	f7ff fdc8 	bl	80003dc <lspaceCode>
	  		 break;
 800084c:	e124      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'f':
	  		 ldotCode();
 800084e:	f7ff fda1 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 8000852:	f7ff fdc3 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 8000856:	f7ff fd9d 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 800085a:	f7ff fdbf 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 800085e:	f7ff fdab 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000862:	f7ff fdbb 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 8000866:	f7ff fd95 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 800086a:	f7ff fdb7 	bl	80003dc <lspaceCode>
	  		 break;
 800086e:	e113      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'g':
	  		 ldashCode();
 8000870:	f7ff fda2 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000874:	f7ff fdb2 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000878:	f7ff fd9e 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 800087c:	f7ff fdae 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 8000880:	f7ff fd88 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 8000884:	f7ff fdaa 	bl	80003dc <lspaceCode>
	  		 break;
 8000888:	e106      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'h':
	  		 ldotCode();
 800088a:	f7ff fd83 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 800088e:	f7ff fda5 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 8000892:	f7ff fd7f 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 8000896:	f7ff fda1 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 800089a:	f7ff fd7b 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 800089e:	f7ff fd9d 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 80008a2:	f7ff fd77 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 80008a6:	f7ff fd99 	bl	80003dc <lspaceCode>
	  		 break;
 80008aa:	e0f5      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'i':
	  		 ldotCode();
 80008ac:	f7ff fd72 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 80008b0:	f7ff fd94 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 80008b4:	f7ff fd6e 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 80008b8:	f7ff fd90 	bl	80003dc <lspaceCode>
	  		 break;
 80008bc:	e0ec      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'j':
	  		 ldotCode();
 80008be:	f7ff fd69 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 80008c2:	f7ff fd8b 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 80008c6:	f7ff fd77 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80008ca:	f7ff fd87 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 80008ce:	f7ff fd73 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80008d2:	f7ff fd83 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 80008d6:	f7ff fd6f 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80008da:	f7ff fd7f 	bl	80003dc <lspaceCode>
	  		 break;
 80008de:	e0db      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'k':
	  		 ldashCode();
 80008e0:	f7ff fd6a 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80008e4:	f7ff fd7a 	bl	80003dc <lspaceCode>
	  		 ldotCode();
 80008e8:	f7ff fd54 	bl	8000394 <ldotCode>
	  		 lspaceCode();
 80008ec:	f7ff fd76 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 80008f0:	f7ff fd62 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80008f4:	f7ff fd72 	bl	80003dc <lspaceCode>
	  		 break;
 80008f8:	e0ce      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'l':
	  	     ldotCode();
 80008fa:	f7ff fd4b 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80008fe:	f7ff fd6d 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000902:	f7ff fd59 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000906:	f7ff fd69 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 800090a:	f7ff fd43 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 800090e:	f7ff fd65 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000912:	f7ff fd3f 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000916:	f7ff fd61 	bl	80003dc <lspaceCode>
	  	     break;
 800091a:	e0bd      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'm':
	  		 ldashCode();
 800091c:	f7ff fd4c 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000920:	f7ff fd5c 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000924:	f7ff fd48 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000928:	f7ff fd58 	bl	80003dc <lspaceCode>
	  		 break;
 800092c:	e0b4      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'n':
	  		 ldashCode();
 800092e:	f7ff fd43 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000932:	f7ff fd53 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000936:	f7ff fd2d 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 800093a:	f7ff fd4f 	bl	80003dc <lspaceCode>
	  	     break;
 800093e:	e0ab      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'o':
	  		 ldashCode();
 8000940:	f7ff fd3a 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000944:	f7ff fd4a 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000948:	f7ff fd36 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 800094c:	f7ff fd46 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000950:	f7ff fd32 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000954:	f7ff fd42 	bl	80003dc <lspaceCode>
	  		 break;
 8000958:	e09e      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'p':
	  	     ldotCode();
 800095a:	f7ff fd1b 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 800095e:	f7ff fd3d 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000962:	f7ff fd29 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000966:	f7ff fd39 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 800096a:	f7ff fd25 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 800096e:	f7ff fd35 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000972:	f7ff fd0f 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000976:	f7ff fd31 	bl	80003dc <lspaceCode>
	  	     break;
 800097a:	e08d      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'q':
	  		 ldashCode();
 800097c:	f7ff fd1c 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000980:	f7ff fd2c 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000984:	f7ff fd18 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000988:	f7ff fd28 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 800098c:	f7ff fd02 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000990:	f7ff fd24 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000994:	f7ff fd10 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000998:	f7ff fd20 	bl	80003dc <lspaceCode>
	  		 break;
 800099c:	e07c      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'r':
	  	     ldotCode();
 800099e:	f7ff fcf9 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80009a2:	f7ff fd1b 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 80009a6:	f7ff fd07 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80009aa:	f7ff fd17 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 80009ae:	f7ff fcf1 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80009b2:	f7ff fd13 	bl	80003dc <lspaceCode>
	  		 break;
 80009b6:	e06f      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 's':
	  	     ldotCode();
 80009b8:	f7ff fcec 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80009bc:	f7ff fd0e 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 80009c0:	f7ff fce8 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80009c4:	f7ff fd0a 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 80009c8:	f7ff fce4 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80009cc:	f7ff fd06 	bl	80003dc <lspaceCode>
	  	     break;
 80009d0:	e062      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 't':
	  		 ldashCode();
 80009d2:	f7ff fcf1 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80009d6:	f7ff fd01 	bl	80003dc <lspaceCode>
	  		 break;
 80009da:	e05d      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'u':
	  	     ldotCode();
 80009dc:	f7ff fcda 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80009e0:	f7ff fcfc 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 80009e4:	f7ff fcd6 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80009e8:	f7ff fcf8 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 80009ec:	f7ff fce4 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 80009f0:	f7ff fcf4 	bl	80003dc <lspaceCode>
	  		 break;
 80009f4:	e050      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'v':
	  	     ldotCode();
 80009f6:	f7ff fccd 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 80009fa:	f7ff fcef 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 80009fe:	f7ff fcc9 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000a02:	f7ff fceb 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000a06:	f7ff fcc5 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000a0a:	f7ff fce7 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000a0e:	f7ff fcd3 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a12:	f7ff fce3 	bl	80003dc <lspaceCode>
	  		 break;
 8000a16:	e03f      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'w':
	  	     ldotCode();
 8000a18:	f7ff fcbc 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000a1c:	f7ff fcde 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000a20:	f7ff fcca 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a24:	f7ff fcda 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000a28:	f7ff fcc6 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a2c:	f7ff fcd6 	bl	80003dc <lspaceCode>
	  		 break;
 8000a30:	e032      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'x':
	  		 ldashCode();
 8000a32:	f7ff fcc1 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a36:	f7ff fcd1 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000a3a:	f7ff fcab 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000a3e:	f7ff fccd 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000a42:	f7ff fca7 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000a46:	f7ff fcc9 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000a4a:	f7ff fcb5 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a4e:	f7ff fcc5 	bl	80003dc <lspaceCode>
	  		 break;
 8000a52:	e021      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'y':
	  		 ldashCode();
 8000a54:	f7ff fcb0 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a58:	f7ff fcc0 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000a5c:	f7ff fc9a 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000a60:	f7ff fcbc 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000a64:	f7ff fca8 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a68:	f7ff fcb8 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000a6c:	f7ff fca4 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a70:	f7ff fcb4 	bl	80003dc <lspaceCode>
	  		 break;
 8000a74:	e010      	b.n	8000a98 <lgenerateMorse+0x348>
	  	 case 'z':
	  		 ldashCode();
 8000a76:	f7ff fc9f 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a7a:	f7ff fcaf 	bl	80003dc <lspaceCode>
	  		 ldashCode();
 8000a7e:	f7ff fc9b 	bl	80003b8 <ldashCode>
	  		 lspaceCode();
 8000a82:	f7ff fcab 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000a86:	f7ff fc85 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000a8a:	f7ff fca7 	bl	80003dc <lspaceCode>
	  	     ldotCode();
 8000a8e:	f7ff fc81 	bl	8000394 <ldotCode>
	  	     lspaceCode();
 8000a92:	f7ff fca3 	bl	80003dc <lspaceCode>
	  	     break;
 8000a96:	bf00      	nop
	  	}

	  }
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f8b4 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <SystemInit+0x64>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <SystemInit+0x64>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <SystemInit+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <SystemInit+0x68>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <SystemInit+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SystemInit+0x68>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <SystemInit+0x68>)
 8000b80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <SystemInit+0x68>)
 8000b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SystemInit+0x68>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <SystemInit+0x68>)
 8000b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <SystemInit+0x68>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SystemInit+0x64>)
 8000ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000baa:	609a      	str	r2, [r3, #8]
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bc6:	e003      	b.n	8000bd0 <LoopCopyDataInit>

08000bc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bce:	3104      	adds	r1, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bd8:	d3f6      	bcc.n	8000bc8 <CopyDataInit>
	ldr	r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bdc:	e002      	b.n	8000be4 <LoopFillZerobss>

08000bde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000be0:	f842 3b04 	str.w	r3, [r2], #4

08000be4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <LoopForever+0x16>)
	cmp	r2, r3
 8000be6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000be8:	d3f9      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bea:	f7ff ffb3 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f001 f95b 	bl	8001ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff faeb 	bl	80001cc <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000bfc:	08001f74 	.word	0x08001f74
	ldr	r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c04:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8000c08:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8000c0c:	20000040 	.word	0x20000040

08000c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>

08000c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f93d 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f80e 	bl	8000c44 <HAL_InitTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	e001      	b.n	8000c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c34:	f7ff ff3c 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_InitTick+0x68>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d022      	beq.n	8000c9e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_InitTick+0x68>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f93c 	bl	8000eea <HAL_SYSTICK_Config>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10f      	bne.n	8000c98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	d809      	bhi.n	8000c92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	f04f 30ff 	mov.w	r0, #4294967295
 8000c86:	f000 f914 	bl	8000eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_InitTick+0x70>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	e007      	b.n	8000ca2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e004      	b.n	8000ca2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e001      	b.n	8000ca2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000001c 	.word	0x2000001c
 8000cb0:	20000014 	.word	0x20000014
 8000cb4:	20000018 	.word	0x20000018

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x1c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <HAL_IncTick+0x1c>)
 8000cc8:	6013      	str	r3, [r2, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	2000003c 	.word	0x2000003c
 8000cd8:	2000001c 	.word	0x2000001c

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	2000003c 	.word	0x2000003c

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d004      	beq.n	8000d18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_Delay+0x40>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4413      	add	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d18:	bf00      	nop
 8000d1a:	f7ff ffdf 	bl	8000cdc <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d8f7      	bhi.n	8000d1a <HAL_Delay+0x26>
  {
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000001c 	.word	0x2000001c

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff47 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff5c 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffb0 	bl	8000e58 <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f12:	e148      	b.n	80011a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 813a 	beq.w	80011a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x38>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b12      	cmp	r3, #18
 8000f3a:	d123      	bne.n	8000f84 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	6939      	ldr	r1, [r7, #16]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_GPIO_Init+0xd4>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fcc:	2b11      	cmp	r3, #17
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b12      	cmp	r3, #18
 8000fd6:	d130      	bne.n	800103a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100e:	2201      	movs	r2, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	f003 0201 	and.w	r2, r3, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8094 	beq.w	80011a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_GPIO_Init+0x2c0>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	4a51      	ldr	r2, [pc, #324]	; (80011c4 <HAL_GPIO_Init+0x2c0>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6613      	str	r3, [r2, #96]	; 0x60
 8001084:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x2c0>)
 8001086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001090:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <HAL_GPIO_Init+0x2c4>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1d4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a43      	ldr	r2, [pc, #268]	; (80011cc <HAL_GPIO_Init+0x2c8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1d0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a42      	ldr	r2, [pc, #264]	; (80011d0 <HAL_GPIO_Init+0x2cc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1cc>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d0:	2307      	movs	r3, #7
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d8:	2300      	movs	r3, #0
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ea:	4937      	ldr	r1, [pc, #220]	; (80011c8 <HAL_GPIO_Init+0x2c4>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111c:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f47f aeaf 	bne.w	8000f14 <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_PWREx_GetVoltageRange+0x18>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40007000 	.word	0x40007000

08001224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001232:	d130      	bne.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800123c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001240:	d038      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2232      	movs	r2, #50	; 0x32
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9b      	lsrs	r3, r3, #18
 8001264:	3301      	adds	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001268:	e002      	b.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3b01      	subs	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127c:	d102      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f2      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d110      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e00f      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a2:	d007      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ac:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000
 80012c8:	20000014 	.word	0x20000014
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	f000 bc11 	b.w	8001b06 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e4:	4ba0      	ldr	r3, [pc, #640]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ee:	4b9e      	ldr	r3, [pc, #632]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80e4 	beq.w	80014ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d007      	beq.n	800131c <HAL_RCC_OscConfig+0x4c>
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2b0c      	cmp	r3, #12
 8001310:	f040 808b 	bne.w	800142a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b01      	cmp	r3, #1
 8001318:	f040 8087 	bne.w	800142a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800131c:	4b92      	ldr	r3, [pc, #584]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x64>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e3e8      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1a      	ldr	r2, [r3, #32]
 8001338:	4b8b      	ldr	r3, [pc, #556]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <HAL_RCC_OscConfig+0x7e>
 8001344:	4b88      	ldr	r3, [pc, #544]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800134c:	e005      	b.n	800135a <HAL_RCC_OscConfig+0x8a>
 800134e:	4b86      	ldr	r3, [pc, #536]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800135a:	4293      	cmp	r3, r2
 800135c:	d223      	bcs.n	80013a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fd40 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e3c9      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001372:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7c      	ldr	r2, [pc, #496]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b7a      	ldr	r3, [pc, #488]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4977      	ldr	r1, [pc, #476]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001390:	4b75      	ldr	r3, [pc, #468]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	4972      	ldr	r1, [pc, #456]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e025      	b.n	80013f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a6:	4b70      	ldr	r3, [pc, #448]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6f      	ldr	r2, [pc, #444]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b6d      	ldr	r3, [pc, #436]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	496a      	ldr	r1, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	4965      	ldr	r1, [pc, #404]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fd00 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e389      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013f2:	f000 fc6f 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 80013f6:	4601      	mov	r1, r0
 80013f8:	4b5b      	ldr	r3, [pc, #364]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	4a5a      	ldr	r2, [pc, #360]	; (800156c <HAL_RCC_OscConfig+0x29c>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	fa21 f303 	lsr.w	r3, r1, r3
 800140e:	4a58      	ldr	r2, [pc, #352]	; (8001570 <HAL_RCC_OscConfig+0x2a0>)
 8001410:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001412:	4b58      	ldr	r3, [pc, #352]	; (8001574 <HAL_RCC_OscConfig+0x2a4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc14 	bl	8000c44 <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d052      	beq.n	80014cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	e36d      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d032      	beq.n	8001498 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001432:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800143e:	f7ff fc4d 	bl	8000cdc <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001446:	f7ff fc49 	bl	8000cdc <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e356      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001458:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a3f      	ldr	r2, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	493a      	ldr	r1, [pc, #232]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
 8001496:	e01a      	b.n	80014ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a32      	ldr	r2, [pc, #200]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc1a 	bl	8000cdc <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc16 	bl	8000cdc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e323      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x1dc>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d073      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d005      	beq.n	80014ec <HAL_RCC_OscConfig+0x21c>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d10e      	bne.n	8001504 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d10b      	bne.n	8001504 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d063      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d15f      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e300      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d106      	bne.n	800151c <HAL_RCC_OscConfig+0x24c>
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e01d      	b.n	8001558 <HAL_RCC_OscConfig+0x288>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x270>
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0c      	ldr	r2, [pc, #48]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x288>
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a05      	ldr	r2, [pc, #20]	; (8001568 <HAL_RCC_OscConfig+0x298>)
 8001552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01b      	beq.n	8001598 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fbbc 	bl	8000cdc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001566:	e010      	b.n	800158a <HAL_RCC_OscConfig+0x2ba>
 8001568:	40021000 	.word	0x40021000
 800156c:	08001f2c 	.word	0x08001f2c
 8001570:	20000014 	.word	0x20000014
 8001574:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fbb0 	bl	8000cdc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e2bd      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158a:	4baf      	ldr	r3, [pc, #700]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x2a8>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fba0 	bl	8000cdc <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fb9c 	bl	8000cdc <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e2a9      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	4ba5      	ldr	r3, [pc, #660]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2d0>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d060      	beq.n	8001690 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x310>
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d119      	bne.n	800160e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d116      	bne.n	800160e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	4b99      	ldr	r3, [pc, #612]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x328>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e286      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b93      	ldr	r3, [pc, #588]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	4990      	ldr	r1, [pc, #576]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800160c:	e040      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d023      	beq.n	800165e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001616:	4b8c      	ldr	r3, [pc, #560]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a8b      	ldr	r2, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fb5b 	bl	8000cdc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fb57 	bl	8000cdc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e264      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	4b82      	ldr	r3, [pc, #520]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	497c      	ldr	r1, [pc, #496]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
 800165c:	e018      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b7a      	ldr	r3, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a79      	ldr	r2, [pc, #484]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff fb37 	bl	8000cdc <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001672:	f7ff fb33 	bl	8000cdc <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e240      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	4b70      	ldr	r3, [pc, #448]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d03c      	beq.n	8001716 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01c      	beq.n	80016de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80016a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016aa:	4a67      	ldr	r2, [pc, #412]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fb12 	bl	8000cdc <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fb0e 	bl	8000cdc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e21b      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ce:	4b5e      	ldr	r3, [pc, #376]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80016d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ef      	beq.n	80016bc <HAL_RCC_OscConfig+0x3ec>
 80016dc:	e01b      	b.n	8001716 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e4:	4a58      	ldr	r2, [pc, #352]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff faf5 	bl	8000cdc <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff faf1 	bl	8000cdc <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1fe      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ef      	bne.n	80016f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80a6 	beq.w	8001870 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001728:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10d      	bne.n	8001750 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	4b44      	ldr	r3, [pc, #272]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	4a43      	ldr	r2, [pc, #268]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173e:	6593      	str	r3, [r2, #88]	; 0x58
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174c:	2301      	movs	r3, #1
 800174e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001750:	4b3e      	ldr	r3, [pc, #248]	; (800184c <HAL_RCC_OscConfig+0x57c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d118      	bne.n	800178e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x57c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a3a      	ldr	r2, [pc, #232]	; (800184c <HAL_RCC_OscConfig+0x57c>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001768:	f7ff fab8 	bl	8000cdc <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001770:	f7ff fab4 	bl	8000cdc <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1c1      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_RCC_OscConfig+0x57c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4d8>
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 8001798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179c:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a6:	e024      	b.n	80017f2 <HAL_RCC_OscConfig+0x522>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d110      	bne.n	80017d2 <HAL_RCC_OscConfig+0x502>
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	4a24      	ldr	r2, [pc, #144]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	4a20      	ldr	r2, [pc, #128]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d0:	e00f      	b.n	80017f2 <HAL_RCC_OscConfig+0x522>
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d016      	beq.n	8001828 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff fa6f 	bl	8000cdc <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff fa6b 	bl	8000cdc <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e176      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_RCC_OscConfig+0x578>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0ed      	beq.n	8001802 <HAL_RCC_OscConfig+0x532>
 8001826:	e01a      	b.n	800185e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff fa58 	bl	8000cdc <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800182e:	e00f      	b.n	8001850 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff fa54 	bl	8000cdc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d906      	bls.n	8001850 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e15f      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001850:	4baa      	ldr	r3, [pc, #680]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1e8      	bne.n	8001830 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185e:	7ffb      	ldrb	r3, [r7, #31]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4ba5      	ldr	r3, [pc, #660]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	4aa4      	ldr	r2, [pc, #656]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d03c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01c      	beq.n	80018be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001884:	4b9d      	ldr	r3, [pc, #628]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800188a:	4a9c      	ldr	r2, [pc, #624]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff fa22 	bl	8000cdc <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189c:	f7ff fa1e 	bl	8000cdc <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e12b      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ae:	4b93      	ldr	r3, [pc, #588]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 80018b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ef      	beq.n	800189c <HAL_RCC_OscConfig+0x5cc>
 80018bc:	e01b      	b.n	80018f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018be:	4b8f      	ldr	r3, [pc, #572]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 80018c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018c4:	4a8d      	ldr	r2, [pc, #564]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff fa05 	bl	8000cdc <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d6:	f7ff fa01 	bl	8000cdc <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e10e      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e8:	4b84      	ldr	r3, [pc, #528]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 80018ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ef      	bne.n	80018d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8102 	beq.w	8001b04 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	2b02      	cmp	r3, #2
 8001906:	f040 80c5 	bne.w	8001a94 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800190a:	4b7c      	ldr	r3, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	429a      	cmp	r2, r3
 800191c:	d12c      	bne.n	8001978 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	3b01      	subs	r3, #1
 800192a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d123      	bne.n	8001978 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d11b      	bne.n	8001978 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d113      	bne.n	8001978 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d109      	bne.n	8001978 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	3b01      	subs	r3, #1
 8001972:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d067      	beq.n	8001a48 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2b0c      	cmp	r3, #12
 800197c:	d062      	beq.n	8001a44 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800197e:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0bb      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800198e:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5a      	ldr	r2, [pc, #360]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001998:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800199a:	f7ff f99f 	bl	8000cdc <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f99b 	bl	8000cdc <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0a8      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b4:	4b51      	ldr	r3, [pc, #324]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c0:	4b4e      	ldr	r3, [pc, #312]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <HAL_RCC_OscConfig+0x830>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019d0:	3a01      	subs	r2, #1
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	4311      	orrs	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019da:	0212      	lsls	r2, r2, #8
 80019dc:	4311      	orrs	r1, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019e2:	0852      	lsrs	r2, r2, #1
 80019e4:	3a01      	subs	r2, #1
 80019e6:	0552      	lsls	r2, r2, #21
 80019e8:	4311      	orrs	r1, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ee:	0852      	lsrs	r2, r2, #1
 80019f0:	3a01      	subs	r2, #1
 80019f2:	0652      	lsls	r2, r2, #25
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019fa:	06d2      	lsls	r2, r2, #27
 80019fc:	430a      	orrs	r2, r1
 80019fe:	493f      	ldr	r1, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a3c      	ldr	r2, [pc, #240]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a10:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a39      	ldr	r2, [pc, #228]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a1c:	f7ff f95e 	bl	8000cdc <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f95a 	bl	8000cdc <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e067      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a42:	e05f      	b.n	8001b04 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e05e      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d157      	bne.n	8001b04 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a6c:	f7ff f936 	bl	8000cdc <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f932 	bl	8000cdc <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e03f      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x7a4>
 8001a92:	e037      	b.n	8001b04 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d02d      	beq.n	8001af6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001ac4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f905 	bl	8000cdc <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f901 	bl	8000cdc <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e00e      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RCC_OscConfig+0x82c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x806>
 8001af4:	e006      	b.n	8001b04 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e005      	b.n	8001b06 <HAL_RCC_OscConfig+0x836>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop

08001b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0c8      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d910      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0207 	bic.w	r2, r3, #7
 8001b3a:	4961      	ldr	r1, [pc, #388]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0b0      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d04c      	beq.n	8001bfa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b68:	4b56      	ldr	r3, [pc, #344]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d121      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e09e      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b80:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d115      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e092      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b98:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e086      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba8:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e07e      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bb8:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 0203 	bic.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	493f      	ldr	r1, [pc, #252]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bca:	f7ff f887 	bl	8000cdc <HAL_GetTick>
 8001bce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd2:	f7ff f883 	bl	8000cdc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e066      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 020c 	and.w	r2, r3, #12
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d1eb      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	492c      	ldr	r1, [pc, #176]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d210      	bcs.n	8001c48 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0207 	bic.w	r2, r3, #7
 8001c2e:	4924      	ldr	r1, [pc, #144]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e036      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4918      	ldr	r1, [pc, #96]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4910      	ldr	r1, [pc, #64]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c86:	f000 f825 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	5cd3      	ldrb	r3, [r2, r3]
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe ffca 	bl	8000c44 <HAL_InitTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08001f2c 	.word	0x08001f2c
 8001ccc:	20000014 	.word	0x20000014
 8001cd0:	20000018 	.word	0x20000018

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d121      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d11e      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d08:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e005      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d24:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d30:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	e004      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d133      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d002      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa4>
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d003      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0xaa>
 8001d76:	e005      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d7a:	617b      	str	r3, [r7, #20]
      break;
 8001d7c:	e005      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d80:	617b      	str	r3, [r7, #20]
      break;
 8001d82:	e002      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	617b      	str	r3, [r7, #20]
      break;
 8001d88:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	3301      	adds	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	fb02 f203 	mul.w	r2, r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0e5b      	lsrs	r3, r3, #25
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dca:	69bb      	ldr	r3, [r7, #24]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3724      	adds	r7, #36	; 0x24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08001f3c 	.word	0x08001f3c
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e00:	f7ff fa02 	bl	8001208 <HAL_PWREx_GetVoltageRange>
 8001e04:	6178      	str	r0, [r7, #20]
 8001e06:	e014      	b.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e20:	f7ff f9f2 	bl	8001208 <HAL_PWREx_GetVoltageRange>
 8001e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	d10b      	bne.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d919      	bls.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2ba0      	cmp	r3, #160	; 0xa0
 8001e44:	d902      	bls.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e013      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e010      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d902      	bls.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e58:	2303      	movs	r3, #3
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e00a      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d102      	bne.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e64:	2302      	movs	r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e004      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b70      	cmp	r3, #112	; 0x70
 8001e6e:	d101      	bne.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 0207 	bic.w	r2, r3, #7
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <__libc_init_array>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	4e0d      	ldr	r6, [pc, #52]	; (8001ee0 <__libc_init_array+0x38>)
 8001eac:	4c0d      	ldr	r4, [pc, #52]	; (8001ee4 <__libc_init_array+0x3c>)
 8001eae:	1ba4      	subs	r4, r4, r6
 8001eb0:	10a4      	asrs	r4, r4, #2
 8001eb2:	2500      	movs	r5, #0
 8001eb4:	42a5      	cmp	r5, r4
 8001eb6:	d109      	bne.n	8001ecc <__libc_init_array+0x24>
 8001eb8:	4e0b      	ldr	r6, [pc, #44]	; (8001ee8 <__libc_init_array+0x40>)
 8001eba:	4c0c      	ldr	r4, [pc, #48]	; (8001eec <__libc_init_array+0x44>)
 8001ebc:	f000 f820 	bl	8001f00 <_init>
 8001ec0:	1ba4      	subs	r4, r4, r6
 8001ec2:	10a4      	asrs	r4, r4, #2
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	42a5      	cmp	r5, r4
 8001ec8:	d105      	bne.n	8001ed6 <__libc_init_array+0x2e>
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
 8001ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed0:	4798      	blx	r3
 8001ed2:	3501      	adds	r5, #1
 8001ed4:	e7ee      	b.n	8001eb4 <__libc_init_array+0xc>
 8001ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eda:	4798      	blx	r3
 8001edc:	3501      	adds	r5, #1
 8001ede:	e7f2      	b.n	8001ec6 <__libc_init_array+0x1e>
 8001ee0:	08001f6c 	.word	0x08001f6c
 8001ee4:	08001f6c 	.word	0x08001f6c
 8001ee8:	08001f6c 	.word	0x08001f6c
 8001eec:	08001f70 	.word	0x08001f70

08001ef0 <memset>:
 8001ef0:	4402      	add	r2, r0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d100      	bne.n	8001efa <memset+0xa>
 8001ef8:	4770      	bx	lr
 8001efa:	f803 1b01 	strb.w	r1, [r3], #1
 8001efe:	e7f9      	b.n	8001ef4 <memset+0x4>

08001f00 <_init>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	bf00      	nop
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr

08001f0c <_fini>:
 8001f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0e:	bf00      	nop
 8001f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f12:	bc08      	pop	{r3}
 8001f14:	469e      	mov	lr, r3
 8001f16:	4770      	bx	lr
